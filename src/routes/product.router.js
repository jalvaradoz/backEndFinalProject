import express from 'express'
import productModel from "../models/product.model.js"
import { socketServer } from '../app.js'

const productRouter = express.Router()

export const getProducts = async () => {
    try {
        return await productModel.find()
    } catch (error) {
        res.status(500).json({ error: 'Error fetching products', error })
        return []
    }
}

productRouter.post('/api/products', async (req, res) => {
    try {
        const { id, title, description, code, price, stock, category } = req.body

        if (id) {
            return res.status(400).json({ error: 'You can`t generate the ID, it will be autogenerated upon existing inventory' })
        }
        // This Validates that every field is present before submitting, also if the stock is 0 or less it does not allow to enter a new product
        if (stock <= 0) {
            return res.status(400).json({ error: 'Stock must be greater than 0' })
        } else if (!title || !description || !code || !price || !stock || !category) {
            return res.status(400).json({ error: 'All fields are required but thumbnails' })
        }

        let existingProduct = await productModel.findOne({ title: title })
        if (existingProduct) {
            return res.status(400).json({ error: 'A product with this TITLE already exists, check inventory first' })
        }

        let result = await productModel.create({ title, description, code, price, stock, category })

        res.status(200).send({ result: 'success', payload: result })

        const products = await getProducts()
        socketServer.emit('updateProducts', products)

    } catch (err) {
        res.status(500).json({ error: 'Internal Server Error', err })
    }
})

productRouter.put('/api/products/:id', async (req, res) => {
    try {
        const productID = req.params.id
        const newProductInfo = req.body

        if (!newProductInfo.title || !newProductInfo.description || !newProductInfo.code || !newProductInfo.price || !newProductInfo.stock || !newProductInfo.category) {
            return res.status(400).send({ status: 'Error while updating', error: 'missing params' })
        }
        let result = await productModel.updateOne({ _id: productID }, newProductInfo)
        res.status(200).send({ result: 'success', payload: result })

        const products = await getProducts()
        socketServer.emit('updateProducts', products)
    } catch (err) {
        res.status(500).json({ error: 'Internal Server Error', err })
    }
})

productRouter.delete('/api/products/:id', async (req, res) => {
    try {
        const productId = req.params.id
        const result = await productModel.findByIdAndDelete(productId)

        if (!result) {
            return res.status(404).json({ error: 'Product not found' })
        }

        let products = await getProducts()
        socketServer.emit('updateProducts', products)

        res.status(200).json({ message: 'Product deleted successfully', payload: result })
    } catch (err) {
        res.status(500).json({ error: 'Internal Server Error', err });
    }
});

export default productRouter